package com.oculussoftware.bus.common.process;

import com.oculussoftware.api.repi.*;
import com.oculussoftware.api.sysi.*;
import com.oculussoftware.repos.*;
import com.oculussoftware.api.busi.common.process.*;

import java.util.*;

/**
* Filename:    InboxRowList.java
* Date:        3/14/00
* Description: 
*
* Copyright 1-31-2000 Oculus Software.  All Rights Reserved.
*
* @author Egan Royal
* @version 1.2
*/
public class InboxRowList extends ReposObjectList implements IInboxRowList
{
  /*
  * Change Activity
  *
  * Issue number    Programmer      Date        Description
  */

  
  protected static final String SORTBY_DATE     = "note.CREATIONDATE DESC";
  protected static final String SORTBY_LOCATION = "PRODUCTNAME, VERSIONNAME, "+SORTBY_DATE;
  protected static final String SORTBY_STATE    = "STATENAME, "+SORTBY_DATE;
  protected static final String SORTBY_CREATOR  = "usr.LASTNAME, usr.FIRSTNAME, "+SORTBY_DATE;
  protected static final String SORTBY_NAME     = "ENTITYNAME, "+SORTBY_DATE;
  protected static final String SORTBY_PRIORITY = "PRIORITYORDERNUM, "+SORTBY_DATE;
  

	//----------------------------- Public Constructor -------------------------
	/** Default constructor just initializes the product list */
	public InboxRowList() throws OculusException
	{
    super();
    _sortby = SORTBY_PRIORITY;
	}//

  protected InboxRowList(Comparator sortCrit) throws OculusException
  {
    super (sortCrit);
    _sortby = SORTBY_PRIORITY;
  }//
  
  //------------------------ Protected Methods --------------------------------
  protected String getLoadQuery() throws ORIOException
  {
    return 
    "SELECT note.OBJECTID, note.NOTIFICATIONKIND, note.CREATIONDATE, note.ACKMASK, "+ 
 "usr.FIRSTNAME, usr.LASTNAME, "+ 
  "prod.NAME AS PRODUCTNAME, "+ 
  "ver.NAME AS VERSIONNAME, "+  
  "ENTITYNAME=rev.NAME + ' [ID:'+LTRIM(STR(feat.VISIBLEID))+']', "+ 
  "st.NAME AS STATENAME, "+  
  "enumlit.ORDERNUM AS PRIORITYORDERNUM, enumlit.NAME AS PRIORITY, "+ 
  "featcat.OBJECTID AS PARENTITYID, NULL AS DISCUSSPAROBJECTTYPE, NULL AS DISCUSSPAROBJECTID, "+
  "NULL AS DISCUSSPARPRODSTATE, "+ 
  "NULL AS DISCUSSPARVERSTATE, "+
  "NULL AS DISCUSSPARCATSTATE, "+
  "NULL AS DISCUSSPARFEATSTATE, "+
  "mm.USERID AS MKTMGRID, "+
  "em.USERID AS ENGMGRID "+
  "FROM (((((((((((NOTIFICATION note LEFT OUTER JOIN CATFEATURELINK featcat ON note.PAROBJECTID = featcat.OBJECTID) "+  
    "LEFT OUTER JOIN ENUMLITERAL enumlit ON featcat.PRIORITYID = enumlit.OBJECTID) "+  
    "LEFT OUTER JOIN FEATURE feat ON featcat.FEATUREID = feat.OBJECTID) "+  
    "LEFT OUTER JOIN FEATUREREVISION rev ON feat.OBJECTID = rev.FEATUREID "+  
              "AND featcat.FEATUREID = rev.FEATUREID "+ 
    "AND ((featcat.PINNEDREVID IS NOT NULL AND rev.OBJECTID = featcat.PINNEDREVID) "+  
      "OR (featcat.PINNEDREVID IS NULL AND rev.OBJECTID = feat.LATESTREVISIONID))) "+  
    "LEFT OUTER JOIN CATEGORY cat ON featcat.CATEGORYID = cat.OBJECTID) "+  
    "LEFT OUTER JOIN PRODUCTVERSION ver ON cat.VERSIONID = ver.OBJECTID) "+  
    "LEFT OUTER JOIN PRODUCT prod ON ver.PRODUCTID = prod.OBJECTID) "+  
    "LEFT OUTER JOIN STATE st ON featcat.STATEID = st.OBJECTID) "+  
    "LEFT OUTER JOIN APPUSER usr ON note.CREATORID = usr.OBJECTID) "+ 
    "LEFT OUTER JOIN OBJECTROLEASSIGN mm ON featcat.OBJECTID = mm.PAROBJECTID AND mm.ROLEID = "+IDCONST.MKTMGRROLE+") "+
    "LEFT OUTER JOIN OBJECTROLEASSIGN em ON featcat.OBJECTID = em.PAROBJECTID AND em.ROLEID = "+IDCONST.ENGMGRROLE+") "+
  "WHERE note.RECIPIENTID =  "+getIID()+" "+
     "AND (note.NOTIFICATIONKIND = 0 OR note.NOTIFICATIONKIND = 2) "+ 
     "AND feat.DELETESTATE = 1 "+
     "AND featcat.DELETESTATE = 1 "+
 "UNION "+
"SELECT note.OBJECTID, note.NOTIFICATIONKIND, note.CREATIONDATE, note.ACKMASK, "+  
  "usr.FIRSTNAME, usr.LASTNAME, "+  
  "prod.NAME, "+  
  "ver.NAME, "+  
  "dt.SUBJECT, "+  
  "'ZZZZZZZZZZZZZ', "+  
  "999999999, NULL, "+ 
  "dt.OBJECTID, dt.PAROBJECTTYPE, dt.PAROBJECTID, "+
  "prod.STATEID, ver.STATEID, cat.STATEID, featcat.STATEID,NULL,NULL "+  
  "FROM ((((((NOTIFICATION note LEFT OUTER JOIN DISCUSSIONTOPIC dt ON note.PAROBJECTID = dt.OBJECTID) "+   
            "LEFT OUTER JOIN CATFEATURELINK featcat ON dt.PAROBJECTID = featcat.OBJECTID) "+  
            "LEFT OUTER JOIN CATEGORY cat ON dt.PAROBJECTID = cat.OBJECTID "+ 
              "OR featcat.CATEGORYID = cat.OBJECTID) "+ 
            "LEFT OUTER JOIN PRODUCTVERSION ver ON dt.PAROBJECTID = ver.OBJECTID "+ 
                "OR cat.VERSIONID = ver.OBJECTID) "+ 
            "LEFT OUTER JOIN PRODUCT prod ON dt.PAROBJECTID = prod.OBJECTID "+   
                                      "OR ver.PRODUCTID = prod.OBJECTID) "+   
            "LEFT OUTER JOIN APPUSER usr ON note.CREATORID = usr.OBJECTID) "+ 
"WHERE note.RECIPIENTID = "+getIID()+" "+
 "AND note.NOTIFICATIONKIND = 1 "+ 
 "AND dt.DELETESTATE = 1 "+
 "AND ((prod.OBJECTID=dt.PAROBJECTID AND prod.DELETESTATE = 1) "+ 
 "OR (ver.OBJECTID=dt.PAROBJECTID AND ver.DELETESTATE = 1) "+ 
 "OR (cat.OBJECTID=dt.PAROBJECTID AND cat.DELETESTATE = 1) "+ 
 "OR (featcat.OBJECTID=dt.PAROBJECTID AND featcat.DELETESTATE = 1)) "+ 

 "UNION "+ 
"SELECT note.OBJECTID, note.NOTIFICATIONKIND, note.CREATIONDATE, note.ACKMASK, "+  
  "usr.FIRSTNAME, usr.LASTNAME, "+  
  "'ZZZZZZZZZZZZZ', "+  
  "'ZZZZZZZZZZZZZ', "+  
  "dt.SUBJECT, "+  
  "'ZZZZZZZZZZZZZ', "+  
  "999999999, NULL, "+ 
  "dt.OBJECTID, dt.PAROBJECTTYPE, dt.PAROBJECTID, "+  
  "NULL,NULL,NULL,NULL,NULL,NULL "+
  "FROM (((((NOTIFICATION note LEFT OUTER JOIN DISCUSSIONTOPIC dt ON note.PAROBJECTID = dt.OBJECTID) "+   
            "LEFT OUTER JOIN FOLDERINPUTLINK flink ON dt.PAROBJECTID = flink.OBJECTID) "+ 
            "LEFT OUTER JOIN PROBLEMSTATEMENT ps ON dt.PAROBJECTID = ps.OBJECTID) "+
	    "LEFT OUTER JOIN REACTION rct ON dt.PAROBJECTID = rct.OBJECTID) "+
            "LEFT OUTER JOIN APPUSER usr ON note.CREATORID = usr.OBJECTID) "+ 
"WHERE note.RECIPIENTID = "+getIID()+" "+
 "AND note.NOTIFICATIONKIND = 1 "+ 
 "AND dt.DELETESTATE = 1 "+
 "AND ((flink.OBJECTID=dt.PAROBJECTID AND flink.DELETESTATE = 1) "+ 
 "OR (ps.OBJECTID=dt.PAROBJECTID AND ps.DELETESTATE = 1) "+
 "OR (rct.OBJECTID=dt.PAROBJECTID AND rct.DELETESTATE = 1)) "+

"UNION "+ 
"SELECT note.OBJECTID, note.NOTIFICATIONKIND, note.CREATIONDATE, note.ACKMASK, "+ 
  "usr.FIRSTNAME, usr.LASTNAME, "+ 
  "fold.NAME, "+ 
  "NULL, "+ 
  "mi.SUBJECT, "+ 
  "st.NAME, "+ 
  "999999999, NULL, "+
  "flink.OBJECTID,NULL,NULL, "+ 
  "NULL,NULL,NULL,NULL,NULL,NULL "+
"FROM (((((NOTIFICATION note LEFT OUTER JOIN MARKETINPUT mi ON note.PAROBJECTID = mi.OBJECTID) "+ 
  "LEFT OUTER JOIN FOLDERINPUTLINK flink ON mi.OBJECTID = flink.MARKETINPUTID) "+ 
  "LEFT OUTER JOIN FOLDER fold ON flink.FOLDERID = fold.OBJECTID) "+ 
  "LEFT OUTER JOIN STATE st ON mi.STATEID = st.OBJECTID) "+ 
  "LEFT OUTER JOIN APPUSER usr ON note.CREATORID = usr.OBJECTID) "+ 
"WHERE note.RECIPIENTID = "+getIID()+" "+
 "AND note.NOTIFICATIONKIND = 4 "+ 
 "AND flink.DELETESTATE = 1 "+
"ORDER BY "+_sortby;
    /*
    return 
     "SELECT NOTIFICATION.OBJECTID, NOTIFICATION.NOTIFICATIONKIND, NOTIFICATION.CREATIONDATE, NOTIFICATION.ACKMASK, "+ 
 "APPUSER.FIRSTNAME, APPUSER.LASTNAME,  "+
  "PRODUCT.NAME AS PRODUCTNAME,  "+
  "PRODUCTVERSION.NAME AS VERSIONNAME, "+  
  "ENTITYNAME=FEATUREREVISION.NAME + ' [ID:'+LTRIM(STR(FEATURE.VISIBLEID))+']', "+ 
  "STATE.NAME AS STATENAME,   "+
  "ENUMLITERAL.ORDERNUM AS PRIORITYORDERNUM, ENUMLITERAL.NAME AS PRIORITY, "+ 
  "CATFEATURELINK.OBJECTID AS PARENTITYID, NULL AS DISCUSSPAROBJECTTYPE, NULL AS DISCUSSPAROBJECTID, "+
  "NULL AS DISCUSSPARPRODSTATE,  "+
  "NULL AS DISCUSSPARVERSTATE, "+
  "NULL AS DISCUSSPARCATSTATE, "+
  "NULL AS DISCUSSPARFEATSTATE  "+
  "FROM (((((((((NOTIFICATION LEFT OUTER JOIN CATFEATURELINK ON NOTIFICATION.PAROBJECTID = CATFEATURELINK.OBJECTID)   "+
    "LEFT OUTER JOIN ENUMLITERAL ON CATFEATURELINK.PRIORITYID = ENUMLITERAL.OBJECTID)   "+
    "LEFT OUTER JOIN FEATURE ON CATFEATURELINK.FEATUREID = FEATURE.OBJECTID)   "+
    "LEFT OUTER JOIN FEATUREREVISION ON FEATURE.OBJECTID = FEATUREREVISION.FEATUREID "+  
              "AND CATFEATURELINK.FEATUREID = FEATUREREVISION.FEATUREID  "+
    "AND ((CATFEATURELINK.PINNEDREVID IS NOT NULL AND FEATUREREVISION.OBJECTID = CATFEATURELINK.PINNEDREVID)   "+
      "OR (CATFEATURELINK.PINNEDREVID IS NULL AND FEATUREREVISION.OBJECTID = FEATURE.LATESTREVISIONID)))   "+
    "LEFT OUTER JOIN CATEGORY ON CATFEATURELINK.CATEGORYID = CATEGORY.OBJECTID)   "+
    "LEFT OUTER JOIN PRODUCTVERSION ON CATEGORY.VERSIONID = PRODUCTVERSION.OBJECTID)  "+ 
    "LEFT OUTER JOIN PRODUCT ON PRODUCTVERSION.PRODUCTID = PRODUCT.OBJECTID)   "+
    "LEFT OUTER JOIN STATE ON CATFEATURELINK.STATEID = STATE.OBJECTID)   "+
    "LEFT OUTER JOIN APPUSER ON NOTIFICATION.CREATORID = APPUSER.OBJECTID)  "+
  "WHERE NOTIFICATION.RECIPIENTID = "+getIID()+
     "AND (NOTIFICATION.NOTIFICATIONKIND = 0 OR NOTIFICATION.NOTIFICATIONKIND = 2)  "+
     "AND FEATURE.DELETESTATE = 1 "+
     "AND CATFEATURELINK.DELETESTATE = 1 "+
 "UNION  "+
"SELECT NOTIFICATION.OBJECTID, NOTIFICATION.NOTIFICATIONKIND, NOTIFICATION.CREATIONDATE, NOTIFICATION.ACKMASK,   "+
  "APPUSER.FIRSTNAME, APPUSER.LASTNAME,   "+
  "PRODUCT.NAME,   "+
  "PRODUCTVERSION.NAME, "+  
  "DISCUSSIONTOPIC.SUBJECT, "+  
  "'ZZZZZZZZZZZZZ',   "+
  "999999999, NULL,  "+
  "DISCUSSIONTOPIC.OBJECTID, DISCUSSIONTOPIC.PAROBJECTTYPE, DISCUSSIONTOPIC.PAROBJECTID, "+
  "PRODUCT.STATEID, PRODUCTVERSION.STATEID, CATEGORY.STATEID, CATFEATURELINK.STATEID   "+
  "FROM ((((((NOTIFICATION LEFT OUTER JOIN DISCUSSIONTOPIC ON NOTIFICATION.PAROBJECTID = DISCUSSIONTOPIC.OBJECTID) "+   
            "LEFT OUTER JOIN CATFEATURELINK ON DISCUSSIONTOPIC.PAROBJECTID = CATFEATURELINK.OBJECTID)   "+
            "LEFT OUTER JOIN CATEGORY ON DISCUSSIONTOPIC.PAROBJECTID = CATEGORY.OBJECTID  "+
              "OR CATFEATURELINK.CATEGORYID = CATEGORY.OBJECTID)  "+
            "LEFT OUTER JOIN PRODUCTVERSION ON DISCUSSIONTOPIC.PAROBJECTID = PRODUCTVERSION.OBJECTID "+ 
                "OR CATEGORY.VERSIONID = PRODUCTVERSION.OBJECTID)  "+
            "LEFT OUTER JOIN PRODUCT ON DISCUSSIONTOPIC.PAROBJECTID = PRODUCT.OBJECTID "+   
                                      "OR PRODUCTVERSION.PRODUCTID = PRODUCT.OBJECTID)    "+
            "LEFT OUTER JOIN APPUSER ON NOTIFICATION.CREATORID = APPUSER.OBJECTID)  "+
"WHERE NOTIFICATION.RECIPIENTID =  "+getIID()+
 "AND NOTIFICATION.NOTIFICATIONKIND = 1  "+
 "AND DISCUSSIONTOPIC.DELETESTATE = 1 "+
 "AND ((PRODUCT.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND PRODUCT.DELETESTATE = 1)  "+
 "OR (PRODUCTVERSION.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND PRODUCTVERSION.DELETESTATE = 1) "+ 
 "OR (CATEGORY.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND CATEGORY.DELETESTATE = 1)  "+
 "OR (CATFEATURELINK.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND CATFEATURELINK.DELETESTATE = 1)) "+ 

 "UNION  "+
"SELECT NOTIFICATION.OBJECTID, NOTIFICATION.NOTIFICATIONKIND, NOTIFICATION.CREATIONDATE, NOTIFICATION.ACKMASK,   "+
  "APPUSER.FIRSTNAME, APPUSER.LASTNAME,   "+
  "'ZZZZZZZZZZZZZ',   "+
  "'ZZZZZZZZZZZZZ',   "+
  "DISCUSSIONTOPIC.SUBJECT, "+  
  "'ZZZZZZZZZZZZZ',   "+
  "999999999, NULL,  "+
  "DISCUSSIONTOPIC.OBJECTID, DISCUSSIONTOPIC.PAROBJECTTYPE, DISCUSSIONTOPIC.PAROBJECTID,   "+
  "NULL,NULL,NULL,NULL "+
  "FROM (((((NOTIFICATION LEFT OUTER JOIN DISCUSSIONTOPIC ON NOTIFICATION.PAROBJECTID = DISCUSSIONTOPIC.OBJECTID) "+   
            "LEFT OUTER JOIN FOLDERINPUTLINK ON DISCUSSIONTOPIC.PAROBJECTID = FOLDERINPUTLINK.OBJECTID)  "+
            "LEFT OUTER JOIN PROBLEMSTATEMENT ON DISCUSSIONTOPIC.PAROBJECTID = PROBLEMSTATEMENT.OBJECTID) "+
	    "LEFT OUTER JOIN REACTION ON DISCUSSIONTOPIC.PAROBJECTID = REACTION.OBJECTID) "+
            "LEFT OUTER JOIN APPUSER ON NOTIFICATION.CREATORID = APPUSER.OBJECTID)  "+
"WHERE NOTIFICATION.RECIPIENTID =  "+getIID()+
 "AND NOTIFICATION.NOTIFICATIONKIND = 1  "+
 "AND DISCUSSIONTOPIC.DELETESTATE = 1 "+
 "AND ((FOLDERINPUTLINK.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND FOLDERINPUTLINK.DELETESTATE = 1) "+ 
 "OR (PROBLEMSTATEMENT.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND PROBLEMSTATEMENT.DELETESTATE = 1) "+
 "OR (REACTION.OBJECTID=DISCUSSIONTOPIC.PAROBJECTID AND REACTION.DELETESTATE = 1)) "+

"UNION  "+
"SELECT NOTIFICATION.OBJECTID, NOTIFICATION.NOTIFICATIONKIND, NOTIFICATION.CREATIONDATE, NOTIFICATION.ACKMASK,  "+
  "APPUSER.FIRSTNAME, APPUSER.LASTNAME,  "+
  "FOLDER.NAME,  "+
  "NULL,  "+
  "MARKETINPUT.SUBJECT, "+ 
  "STATE.NAME,  "+
  "999999999, NULL, "+
  "FOLDERINPUTLINK.OBJECTID,NULL,NULL, "+ 
  "NULL,NULL,NULL,NULL "+
"FROM (((((NOTIFICATION LEFT OUTER JOIN MARKETINPUT ON NOTIFICATION.PAROBJECTID = MARKETINPUT.OBJECTID) "+ 
  "LEFT OUTER JOIN FOLDERINPUTLINK ON MARKETINPUT.OBJECTID = FOLDERINPUTLINK.MARKETINPUTID)  "+
  "LEFT OUTER JOIN FOLDER ON FOLDERINPUTLINK.FOLDERID = FOLDER.OBJECTID)  "+
  "LEFT OUTER JOIN STATE ON MARKETINPUT.STATEID = STATE.OBJECTID)  "+
  "LEFT OUTER JOIN APPUSER ON NOTIFICATION.CREATORID = APPUSER.OBJECTID) "+ 
"WHERE NOTIFICATION.RECIPIENTID =  "+getIID()+
 "AND NOTIFICATION.NOTIFICATIONKIND = 4  "+
 "AND FOLDERINPUTLINK.DELETESTATE = 1 "+
"ORDER BY "+_sortby;
*/
  }//

  protected String getClassName () { return "InboxRow"; }
	//----------------- IHyperLinkList Methods ------------------------------------
	/**
	*
 	*/
  public IInboxRow nextInboxRow() throws OculusException
	{
		return (IInboxRow)next();
	}//
	
	/**
	*	
	*/
  public boolean hasMoreInboxRows()
	{
		return hasNext();
	}//
  
//------------------- IBusinessObjectList Methods --------------------------
  public IRCollection setSort(Comparator sortCrit) throws OculusException
  {
    InboxRowList sortedList = new InboxRowList(sortCrit);
    sortedList._items.addAll(this._items);
    return sortedList;
  }//
  
	
//----------------- IPoolable Methods ------------------------------------
	public Object dolly() throws OculusException
	{
	  InboxRowList inboxRowList = null;
    inboxRowList = new InboxRowList();
    inboxRowList.setIID(_iid);
    inboxRowList._items = this._items;
    inboxRowList.reset();
		return inboxRowList;
	}//
  
    /** Pseudo-constructor that expects the IIID of the object and the ObjectContext as args */
  public IPoolable construct(IObjectContext context, IDataSet args)
    throws OculusException
  {
    IIID iid = args.getIID();

    if (iid == null)
      throw new OculusException("Object ID expected.");
    setIID(iid);

    if (context == null)
      throw new OculusException("Object Context expected.");
    setObjectContext(context);
    
    if (args.containsKey(SortKind.KEY))
    {
      SortKind sort = (SortKind)args.get(SortKind.KEY);
      if(sort.equals(SortKind.BYNAME))//Name
        _sortby = SORTBY_NAME;
      else if(sort.equals(SortKind.BYSTATE))//State
        _sortby = SORTBY_STATE;
      else if(sort.equals(SortKind.BYDATE))//Date
        _sortby = SORTBY_DATE;
      else if(sort.equals(SortKind.BYPATH))//Product/Version
        _sortby = SORTBY_LOCATION;
      else if(sort.equals(SortKind.BYCREATOR))//Who
        _sortby = SORTBY_CREATOR;
      else if(sort.equals(SortKind.BYPRIORITY))//Priority
        _sortby = SORTBY_PRIORITY;
    }
    return this;
  }
}//end class