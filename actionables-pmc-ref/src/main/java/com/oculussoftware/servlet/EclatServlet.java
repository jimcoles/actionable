package com.oculussoftware.servlet;

import com.oculussoftware.api.sysi.*;
import com.oculussoftware.system.*;
import com.oculussoftware.api.repi.IRObject;
import com.oculussoftware.repos.util.*;
import com.oculussoftware.ui.*;
import com.oculussoftware.api.ui.html.wrappers.*;
import com.oculussoftware.ui.html.wrappers.*;
import com.oculussoftware.api.ui.html.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;

/**
* Filename:    EclatServlet.java
* Date:        2/28/00
* Description: Base class for all of the standard servlets in the Oculus empire.
*              It provides some basic functionality as well as restricting what
*              each servlet implementation can do to enforce good coding.
*
* Copyright 1-31-2000 Oculus Software.  All Rights Reserved.
*
* @author Saleem Shafi
* @version 1.2
*/

/*
* Change Activity
*
* Issue number    Programmer      Date        Description
* BUG00477        Zain Nemazie    05/26/00    Catching ObjectLockedException throwing alert box.
* PRB00922        Zain Nemazie    06/9/00     Modifed wording for object locked exception 
* EXTRANET        Matt Pomroy     08/1/00     Override service method to account for external requests
*                                             to determine if the request originated from the extranet
*                                             proxy.  If so, links are modified appropriately.
*                                             Removed sessionExpired(PrinWriter, BrowserKind)
*                                             Added sessionExpired(PrinWriter, BrowserKind, boolean)
*
*                                             
*/

public abstract class EclatServlet extends HttpServlet
{
 private static final String PARM_ERR_FLAG = "System.ERROR";
 protected boolean cacheable = false; // Default says servlet is not cacheable by the browser
 public static String URL = null;
 /*  
 protected void handleUnexpectedException(SessionSrvc sess, IHTML doc, Exception ex)
 {
 try {
 //      if (ex instanceOf ACertainException )
 sess.putGlobalValue(PARM_ERR_FLAG, ex);
 res.sendRedirect(req.getScheme()+"://"+
 req.getServerName()+":"+req.getServerPort()+
 "/servlet/common/SvtAllSystemError");
 }
 catch (IOException ex1) {
 // Last ditch attempt to communicate problem to user...
 try {
 doc.println("<P> A serious system error has occured on the application server.</P>");
 out.println("<P> Exception text: "+ex1.getMessage()+" </P>");
 out.println("</FONT>");
 }
 // Last ditch exception squelcher
 catch (Exception ignore) {
 }
 }
 }
 */
 // Force each page to produce some output
 public IHTML buildPage(SessionSrvc session, IHTML doc, IObjectContext context, String pageType) throws Exception
 {
   handleGet(session, doc, context);
   return doc;
 } 
 /** Preprocessor for any GET method requests */
 public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
 {
   if(URL == null)
   {
     URL = req.getScheme() + "://" + req.getServerName() + ":" + req.getServerPort() + "/";
     com.oculussoftware.service.mail.MailService.setURL(URL);
   }//end if
   // Setup the output stream
   res.setContentType("text/html");
   // Set cacheability of the servlet
   if (!cacheable)
	 res.setHeader("Expires", "Tues, 01 Jan 1980 00:00:00 GMT");
   PrintWriter out = res.getWriter();
   SessionSrvc thisSession = SessionSrvc.getSessionSrvc(req);
   boolean lIsExternal = false;
   BrowserKind bk = BrowserKind.ALL;
   if(thisSession != null)
   {
    // Determine if this is an external request
   lIsExternal = thisSession.getGlobalValue("EXTRANET_REQUEST") != null;
	 IObjectContext context = (IObjectContext) thisSession.getGlobalValue("Context");
	 // Make sure the user is logged in properly
	 if (context != null)
	 {
	   try
	   {
      if(!context.getCRM().isLoggedIn(context))
        redirectToLogin(req,res);
      else
      {
		     String strBrowser = (String)thisSession.getGlobalValue("Browser");
		     if (strBrowser != null && strBrowser.equals("NETSCAPE"))
			         bk = BrowserKind.NETSCAPE;
			       else if(strBrowser != null && strBrowser.equals("IE"))
		       bk = BrowserKind.IE;
		     IHTML thisPage = new HTML(bk);
		     storeParameters(thisSession, req);

		     // Only give the servlet implementation the ability to handle information
		     // in the session, create HTML using an IHTML object, and let them know
		     // who is making the request

		     thisPage = buildPage(thisSession, thisPage, context, req.getParameter("Page"));

		     // Display the IHTML page generated by this servlet.
		     out.println(thisPage);
       }//end else
	   }
	   catch(ObjectLockedException e)
	   {
		 IHTML htm = new HTML(bk);
		 htm.addBody().setOnLoad("window.alert('The object you requested has been checked out for edit. \\n Please try again later.');parent.location='/system/OculusHtml/Selection.htm';");
		 out.println(htm);    
	   }
	   catch(Throwable exp)
	   {
		  exp.printStackTrace(out);
      com.oculussoftware.service.log.LogService.getInstance().write(exp); 
	   }
	 }//end if
	 else
   {
	   sessionExpired(out,bk, lIsExternal);
   }//end else
   }//end if
   else
   {
	    sessionExpired(out,bk, lIsExternal);
   }//end else
   out.flush();
   out.close();
 }   
 /** Preprocessor for any POST request */
 public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
 {
   // Setup the output stream
   res.setContentType("text/html");
   // Posts are never cacheable
   res.setHeader("Expires", "Tues, 01 Jan 1980 00:00:00 GMT");

   SessionSrvc thisSession = SessionSrvc.getSessionSrvc(req);

   boolean lIsExternal = false;

   if(thisSession != null)
   {
    // Determine if this is an external request
   lIsExternal = thisSession.getGlobalValue("EXTRANET_REQUEST") != null;
	 IObjectContext context = (IObjectContext) thisSession.getGlobalValue("Context");
	 // Make sure the user is properly logged in
	 if (context != null)
	 {
	   try
	   {
      if(!context.getCRM().isLoggedIn(context))
       redirectToLogin(req,res);
      else
      { 
		     storeParameters(thisSession, req);

		     // implementation of this method should not product any output
		     handlePost(thisSession, context);
		     String destinationURL = thisSession.getTargetPage();
		     String destinationFrame = thisSession.getTargetFrame();
		     // Go to the next page
		     if (destinationURL != null)
		     {
		       thisSession.setTargetPage(null);
		       thisSession.setTargetFrame(null);
		       if (destinationFrame == null || destinationFrame.equals("self")) 
           {
			       if (! lIsExternal) 
             {
//                RequestDispatcher lRd = getServletContext().getRequestDispatcher(destinationURL);
//                try 
//                {
//	                req.setAttribute("EXTRANET_METHOD", "GET");
//	                lRd.forward(req, res);
//                } 
//                catch(Throwable e) 
//                {
//	                throw new ServletException(getClass().toString() + ".doGet():  Could not forward to target URL.\n" + e);
//                }
                 // this code is strange, it does not seem to drop the session
                 // but the above commented code requires that the targetframe be set?
    				     res.sendRedirect(req.getScheme() + "://" + req.getServerName() + ":" + req.getServerPort() + destinationURL);			 	
			        }//end if
              else 
              {				 
				        // Forward to the target URL to ensure a valid session
				        RequestDispatcher lRd = getServletContext().getRequestDispatcher(destinationURL);
				        try 
                {
					        req.setAttribute("EXTRANET_METHOD", "GET");
					        lRd.forward(req, res);
				        }
                catch(Throwable e) 
                {
					        throw new ServletException(getClass().toString() + ".doGet():  Could not forward to target URL.\n" + e);
				        }					 	
			        }//end else 
		       } 
           else
		       {
			     res.getWriter().println("<HTML><HEAD><SCRIPT>");
			     res.getWriter().println(
			       "function reloadTree() { "+
			       "  var treeframe = parent; "+
			       "  while (!treeframe.TreeArea) "+
			       "    treeframe = treeframe.parent; "+
			       "  treeframe = treeframe.TreeArea.Tree; "+
			       "  treeframe.reload(false); "+
			       "}");
			     if (thisSession.reloadTree())
			       res.getWriter().println("reloadTree();");
			     thisSession.setTreeReload(false);
			     res.getWriter().println(destinationFrame+".location='"+destinationURL+"';");
			     res.getWriter().println("</SCRIPT></HEAD></HTML>");
			     res.getWriter().flush();
   			     res.getWriter().close();
		       }
		     }
		     else
		       throw new Exception("Missing Destination URL");
       }//end else 
	   }
	   catch(Throwable exp)
	   {
		   exp.printStackTrace(res.getWriter());
       com.oculussoftware.service.log.LogService.getInstance().write(exp); 
	   }
	 }
	 else {
	   sessionExpired(res.getWriter() ,BrowserKind.ALL, lIsExternal);
	 }  
   }//end if
   else {
	 sessionExpired(res.getWriter(),BrowserKind.ALL, lIsExternal);
   }	 
 }       
               
 public void handleGet(SessionSrvc session, IHTML doc, IObjectContext context)
 throws Exception
 {
 } 
 
 // Don't force every page to have some processing
 public void handlePost(SessionSrvc session, IObjectContext context)
 throws Exception
 {
 } 
 
 /**
 * redirects to the login via the logout
 */
 protected void redirectToLogin(HttpServletRequest req, HttpServletResponse res) throws IOException
 {
//    RequestDispatcher lRd = getServletContext().getRequestDispatcher("/servlet/common.SvtLogoutHandler");
//    try 
//    {
//	    req.setAttribute("EXTRANET_METHOD", "GET");
//	    lRd.forward(req, res);
//    } 
//    catch(Throwable e) 
//    {
//	    throw new ServletException(getClass().toString() + ".doGet():  Could not forward to target URL.\n" + e);
//    }
    //issue # 2191 this method throws an IllegalStateException if we use 
    //a forward
     res.sendRedirect(req.getScheme()+"://"+req.getServerName()+":"+req.getServerPort()+"/servlet/common.SvtLogoutHandler");
 }
 
/**
 * This method determines if the incomming request originated from the extranet proxy.
 * The reason for this override is due to the face that external requests invoke the
 * <code>RequestDispatcher</code> as opposed to <code>HttpServletResponse.redirect</code>.
 * Redirects followed by the ExtranetProxy dropped session information.  The forward method
 * achieves the same result while keeping session information intact.  However, redirects
 * automatically set the request type to GET whereas forward request types are that of the
 * original requests.  The workaround here is for the forwarding servlet to add a request
 * attribute identifying the request as originating from the extranet and requiring the
 * doGet method of the target servlet.
 *
 * The protocol for such a request must contain the following attribute and value:
 * <pre>
 *   "EXTRANET_METHOD" = "GET"  
 * </pre> 
 *
 * Any request that does not adhere to this protocol is handled by <code>super.service()</code>.
 * @param aRequest  The incomming request
 * @param aResponse  The outgoing response
 * @exception ServletException  Thrown if servlet related errors are encountered during request processing
 * @exception IOException  Thrown if IO errors are encountered during request processing
 */
protected void service(HttpServletRequest aRequest, HttpServletResponse aResponse) throws ServletException, IOException {
	if (aRequest.getAttribute("EXTRANET_METHOD") == null) {
		super.service(aRequest, aResponse);
	} else {
		// If comming from a forward, determine if GET method should be invoked
		String lMethod = (String) aRequest.getAttribute("EXTRANET_METHOD");
		if (lMethod != null && lMethod.equals("GET")) {
			doGet(aRequest, aResponse);
		} else {
			super.service(aRequest, aResponse);
		}
	}
}
/**
 *  Forwards to SvtLogoutHandler in the event of an expired session.  The link to
 *  the logout handler is routed through the extranet proxy if the request originated
 *  externally.
 *  
 *  @param out  The output of this servlet
 *  @param bk  Browser kind of the requester
 *  @param isExternalRequest  Is this an external request.
 */
 protected void sessionExpired(PrintWriter out, BrowserKind bk, boolean isExternalRequest)
 {
   IHTML htm = new HTML(bk);
   if (! isExternalRequest) {
	   htm.addBody().setOnLoad("window.alert('Your Session Has Expired.\\n Please Login Again.');parent.location='/servlet/common.SvtLogoutHandler';");  	
   } else {
	   htm.addBody().setOnLoad("window.alert('Your Session Has Expired.\\n Please Login Again.');parent.location='/pmc/servlet/extranetProxy?Servlet=common.SvtLogoutHandler';");  	   	
   }
   out.println(htm);
 }    
 /** Takes all of the parameters passed to it from the caller and puts the values in the session. */
 protected void storeParameters(SessionSrvc session, HttpServletRequest req)
 {
   for (Enumeration paramNames = req.getParameterNames(); paramNames.hasMoreElements();)
   {
	 String name = (String) paramNames.nextElement();
	 //      req.getSession().putValue(name, req.getParameter(name));
	 session.putLocalValue(name, req.getParameter(name));
   }
 } 
}
